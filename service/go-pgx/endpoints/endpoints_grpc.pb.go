// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.19.4
// source: endpoints/endpoints.proto

package endpoints

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// HealthClient is the client API for Health service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type HealthClient interface {
	GetHealthCheck(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*emptypb.Empty, error)
}

type healthClient struct {
	cc grpc.ClientConnInterface
}

func NewHealthClient(cc grpc.ClientConnInterface) HealthClient {
	return &healthClient{cc}
}

func (c *healthClient) GetHealthCheck(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/ecobenchmark.Health/GetHealthCheck", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// HealthServer is the server API for Health service.
// All implementations must embed UnimplementedHealthServer
// for forward compatibility
type HealthServer interface {
	GetHealthCheck(context.Context, *emptypb.Empty) (*emptypb.Empty, error)
	mustEmbedUnimplementedHealthServer()
}

// UnimplementedHealthServer must be embedded to have forward compatible implementations.
type UnimplementedHealthServer struct {
}

func (UnimplementedHealthServer) GetHealthCheck(context.Context, *emptypb.Empty) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetHealthCheck not implemented")
}
func (UnimplementedHealthServer) mustEmbedUnimplementedHealthServer() {}

// UnsafeHealthServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to HealthServer will
// result in compilation errors.
type UnsafeHealthServer interface {
	mustEmbedUnimplementedHealthServer()
}

func RegisterHealthServer(s grpc.ServiceRegistrar, srv HealthServer) {
	s.RegisterService(&Health_ServiceDesc, srv)
}

func _Health_GetHealthCheck_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HealthServer).GetHealthCheck(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ecobenchmark.Health/GetHealthCheck",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HealthServer).GetHealthCheck(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

// Health_ServiceDesc is the grpc.ServiceDesc for Health service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Health_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "ecobenchmark.Health",
	HandlerType: (*HealthServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetHealthCheck",
			Handler:    _Health_GetHealthCheck_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "endpoints/endpoints.proto",
}

// TodoListClient is the client API for TodoList service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type TodoListClient interface {
	AddAccount(ctx context.Context, in *AddAccountInput, opts ...grpc.CallOption) (*AddAccountOutput, error)
	AddListToAccount(ctx context.Context, in *AddListInput, opts ...grpc.CallOption) (*AddListOutput, error)
	AddTaskToList(ctx context.Context, in *AddTaskInput, opts ...grpc.CallOption) (*AddTaskOutput, error)
	GetListsWithTasks(ctx context.Context, in *GetListInput, opts ...grpc.CallOption) (*GetListOutput, error)
	GetStats(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*GetStatsOutput, error)
}

type todoListClient struct {
	cc grpc.ClientConnInterface
}

func NewTodoListClient(cc grpc.ClientConnInterface) TodoListClient {
	return &todoListClient{cc}
}

func (c *todoListClient) AddAccount(ctx context.Context, in *AddAccountInput, opts ...grpc.CallOption) (*AddAccountOutput, error) {
	out := new(AddAccountOutput)
	err := c.cc.Invoke(ctx, "/ecobenchmark.TodoList/AddAccount", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *todoListClient) AddListToAccount(ctx context.Context, in *AddListInput, opts ...grpc.CallOption) (*AddListOutput, error) {
	out := new(AddListOutput)
	err := c.cc.Invoke(ctx, "/ecobenchmark.TodoList/AddListToAccount", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *todoListClient) AddTaskToList(ctx context.Context, in *AddTaskInput, opts ...grpc.CallOption) (*AddTaskOutput, error) {
	out := new(AddTaskOutput)
	err := c.cc.Invoke(ctx, "/ecobenchmark.TodoList/AddTaskToList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *todoListClient) GetListsWithTasks(ctx context.Context, in *GetListInput, opts ...grpc.CallOption) (*GetListOutput, error) {
	out := new(GetListOutput)
	err := c.cc.Invoke(ctx, "/ecobenchmark.TodoList/GetListsWithTasks", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *todoListClient) GetStats(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*GetStatsOutput, error) {
	out := new(GetStatsOutput)
	err := c.cc.Invoke(ctx, "/ecobenchmark.TodoList/GetStats", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// TodoListServer is the server API for TodoList service.
// All implementations must embed UnimplementedTodoListServer
// for forward compatibility
type TodoListServer interface {
	AddAccount(context.Context, *AddAccountInput) (*AddAccountOutput, error)
	AddListToAccount(context.Context, *AddListInput) (*AddListOutput, error)
	AddTaskToList(context.Context, *AddTaskInput) (*AddTaskOutput, error)
	GetListsWithTasks(context.Context, *GetListInput) (*GetListOutput, error)
	GetStats(context.Context, *emptypb.Empty) (*GetStatsOutput, error)
	mustEmbedUnimplementedTodoListServer()
}

// UnimplementedTodoListServer must be embedded to have forward compatible implementations.
type UnimplementedTodoListServer struct {
}

func (UnimplementedTodoListServer) AddAccount(context.Context, *AddAccountInput) (*AddAccountOutput, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddAccount not implemented")
}
func (UnimplementedTodoListServer) AddListToAccount(context.Context, *AddListInput) (*AddListOutput, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddListToAccount not implemented")
}
func (UnimplementedTodoListServer) AddTaskToList(context.Context, *AddTaskInput) (*AddTaskOutput, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddTaskToList not implemented")
}
func (UnimplementedTodoListServer) GetListsWithTasks(context.Context, *GetListInput) (*GetListOutput, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetListsWithTasks not implemented")
}
func (UnimplementedTodoListServer) GetStats(context.Context, *emptypb.Empty) (*GetStatsOutput, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetStats not implemented")
}
func (UnimplementedTodoListServer) mustEmbedUnimplementedTodoListServer() {}

// UnsafeTodoListServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to TodoListServer will
// result in compilation errors.
type UnsafeTodoListServer interface {
	mustEmbedUnimplementedTodoListServer()
}

func RegisterTodoListServer(s grpc.ServiceRegistrar, srv TodoListServer) {
	s.RegisterService(&TodoList_ServiceDesc, srv)
}

func _TodoList_AddAccount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddAccountInput)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TodoListServer).AddAccount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ecobenchmark.TodoList/AddAccount",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TodoListServer).AddAccount(ctx, req.(*AddAccountInput))
	}
	return interceptor(ctx, in, info, handler)
}

func _TodoList_AddListToAccount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddListInput)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TodoListServer).AddListToAccount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ecobenchmark.TodoList/AddListToAccount",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TodoListServer).AddListToAccount(ctx, req.(*AddListInput))
	}
	return interceptor(ctx, in, info, handler)
}

func _TodoList_AddTaskToList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddTaskInput)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TodoListServer).AddTaskToList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ecobenchmark.TodoList/AddTaskToList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TodoListServer).AddTaskToList(ctx, req.(*AddTaskInput))
	}
	return interceptor(ctx, in, info, handler)
}

func _TodoList_GetListsWithTasks_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetListInput)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TodoListServer).GetListsWithTasks(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ecobenchmark.TodoList/GetListsWithTasks",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TodoListServer).GetListsWithTasks(ctx, req.(*GetListInput))
	}
	return interceptor(ctx, in, info, handler)
}

func _TodoList_GetStats_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TodoListServer).GetStats(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ecobenchmark.TodoList/GetStats",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TodoListServer).GetStats(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

// TodoList_ServiceDesc is the grpc.ServiceDesc for TodoList service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var TodoList_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "ecobenchmark.TodoList",
	HandlerType: (*TodoListServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AddAccount",
			Handler:    _TodoList_AddAccount_Handler,
		},
		{
			MethodName: "AddListToAccount",
			Handler:    _TodoList_AddListToAccount_Handler,
		},
		{
			MethodName: "AddTaskToList",
			Handler:    _TodoList_AddTaskToList_Handler,
		},
		{
			MethodName: "GetListsWithTasks",
			Handler:    _TodoList_GetListsWithTasks_Handler,
		},
		{
			MethodName: "GetStats",
			Handler:    _TodoList_GetStats_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "endpoints/endpoints.proto",
}
